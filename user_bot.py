# user_bot.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, ConversationHandler, InlineQueryHandler
from telegram.ext import filters

from config import USER_BOT_TOKEN, ADMIN_ID, SURA_NAMES
from database import db
from text_resources import get_text
from mistral_integration import translator

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def _get_main_keyboard(user_id):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
    lang = db.get_user_language(user_id) or 'ru'  # –î–µ—Ñ–æ–ª—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π –µ—Å–ª–∏ None
    
    keyboard = [
        [InlineKeyboardButton(get_text('btn_listen_quran', lang), callback_data="listen_quran"),
         InlineKeyboardButton(get_text('btn_listen_nasheed', lang), callback_data="listen_nasheed")],
        [InlineKeyboardButton(get_text('btn_sura_of_day', lang), callback_data="sura_of_day"),
         InlineKeyboardButton(get_text('btn_nasheed_of_day', lang), callback_data="nasheed_of_day")],
    ]
    
    favorite_buttons = []
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—É—Ä—ã –∏–ª–∏ –Ω–∞—à–∏–¥—ã
    if db.get_user_favorite_suras(user_id):
        favorite_buttons.append(InlineKeyboardButton(get_text('btn_favorite_suras', lang), callback_data="favorite_suras"))
    if db.get_user_favorite_nasheeds(user_id):
        favorite_buttons.append(InlineKeyboardButton(get_text('btn_favorite_nasheeds', lang), callback_data="favorite_nasheeds"))
    
    if favorite_buttons:
        keyboard.append(favorite_buttons)

    keyboard.append([InlineKeyboardButton(get_text('btn_chat_admin', lang), callback_data="chat_with_admin"),
                     InlineKeyboardButton(get_text('btn_language', lang), callback_data="change_language")])
    return InlineKeyboardMarkup(keyboard)

async def user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —é–∑–µ—Ä-–±–æ—Ç–∞ - —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Ç–æ–º –º–µ–Ω—é"""
    user = update.effective_user
    
    logger.info(f"‚úÖ /start received from user {user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.save_user(user.id, user.username, user.first_name)
    db.update_user_activity(user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —è–∑—ã–∫
    user_lang = db.get_user_language(user.id)
    logger.info(f"üåç User {user.id} language: {user_lang}")
    
    # –ï—Å–ª–∏ —è–∑—ã–∫ –ù–ï –≤—ã–±—Ä–∞–Ω (None) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    if user_lang is None:
        logger.info(f"üìù Showing language selection to user {user.id}")
        keyboard = [
            [InlineKeyboardButton("üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", callback_data="lang_ar")],
            [InlineKeyboardButton("üá∫üáø O'zbek", callback_data="lang_uz")],
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
        ]
        
        welcome_msg = (
            "üå∏ Assalamu Alaykum!\n"
            "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ\n"
            "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / ÿßÿÆÿ™ÿ± ÿßŸÑŸÑÿ∫ÿ© / Tilni tanlang:"
        )
        
        if update.message:
            await update.message.reply_text(
                welcome_msg,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                welcome_msg,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return
    
    # –ï—Å–ª–∏ —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = await _get_main_keyboard(user.id)
    main_menu_text = get_text('main_menu', user_lang)

    if update.message:
        await update.message.reply_text(
            main_menu_text,
            reply_markup=keyboard
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(main_menu_text, reply_markup=keyboard)

async def listen_quran(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —á—Ç–µ—Ü–∞"""
    query = update.callback_query
    db.update_user_activity(query.from_user.id)
    
    lang = db.get_user_language(query.from_user.id) or 'ru'
    qaris = db.get_all_qaris()
    
    if not qaris:
        await query.edit_message_text(
            get_text('no_reciters', lang),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text('back', lang), callback_data="main_menu")]])
        )
        return
    
    keyboard = []
    lang_map = {'ar': 1, 'ru': 2, 'uz': 3, 'en': 4}
    name_index = lang_map.get(lang, 2) # default to russian

    for qari in qaris:
        qari_id = qari[0]
        display_name = qari[name_index]
        keyboard.append([InlineKeyboardButton(display_name, callback_data=f"qari_{qari_id}")])
    
    keyboard.append([InlineKeyboardButton(get_text('back', lang), callback_data="main_menu")])
    
    await query.edit_message_text(
        get_text('choose_reciter', lang),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_qari_suras(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—É—Ä—ã —á—Ç–µ—Ü–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    db.update_user_activity(query.from_user.id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º qari_id –∏–∑ callback_data –∏–ª–∏ user_data
    if query.data.startswith("qari_page_"):
        qari_id = context.user_data.get('current_qari')
        page = int(query.data.split("_")[-1])
        context.user_data['sura_page'] = page
    else: # qari_...
        qari_id = int(query.data.split("_")[1])
        context.user_data['current_qari'] = qari_id
        context.user_data['sura_page'] = 0 # –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    user_id = query.from_user.id
    page = context.user_data.get('sura_page', 0)
    items_per_page = 5  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 5 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    
    suras = db.get_suras_by_qari(qari_id, items_per_page, page * items_per_page)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—Ä –¥–ª—è —ç—Ç–æ–≥–æ —á—Ç–µ—Ü–∞
    qari_suras_all = db.get_suras_by_qari(qari_id, 114, 0)
    total_suras = len(qari_suras_all)
    if not total_suras: # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ get_suras_by_qari –≤–µ—Ä–Ω–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        total_suras = 0
    
    if not suras:
        lang = db.get_user_language(user_id) or 'ru'
        await query.edit_message_text(
            get_text('no_suras', lang),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text('back', lang), callback_data="listen_quran")]])
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —á—Ç–µ—Ü–∞ –∏ —è–∑—ã–∫
    qari = db.get_qari_by_id(qari_id)
    lang = db.get_user_language(user_id) or 'ru'
    lang_map = {'ar': 2, 'uz': 3, 'ru': 4, 'en': 5}
    name_index = lang_map.get(lang, 4) # default to ru
    qari_name = qari[name_index] if qari else f"–ß—Ç–µ—Ü {qari_id}"
    
    keyboard = []
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SURA_NAMES –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    for sura_data in suras:
        order = sura_data[0]
        # –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ SURA_NAMES –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sura_name = SURA_NAMES.get(order, {}).get(lang, f"Sura {order}")
        display_name = f"{order}. {sura_name}"
        keyboard.append([InlineKeyboardButton(display_name, callback_data=f"play_sura_{order}")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(get_text('previous', lang), callback_data=f"qari_page_{page-1}"))
    
    if (page + 1) * items_per_page < total_suras:
        nav_buttons.append(InlineKeyboardButton(get_text('next', lang), callback_data=f"qari_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton(get_text('btn_search_sura', lang), switch_inline_query_current_chat="")])
    keyboard.append([InlineKeyboardButton(get_text('back', lang), callback_data="listen_quran")])
    keyboard.append([InlineKeyboardButton(get_text('home', lang), callback_data="main_menu")])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if query.message:
        context.user_data['suras_list_message_id'] = query.message.message_id
    
    await query.edit_message_text(
        f"üéô {qari_name}\nüìñ –°—É—Ä—ã {page*items_per_page+1}-{page*items_per_page+len(suras)}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def play_sura(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å—É—Ä—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    query = update.callback_query
    db.update_user_activity(query.from_user.id)
    
    parts = query.data.split("_")
    sura_number = int(parts[2])
    # –ï—Å–ª–∏ callback play_sura_NUMBER_QARIID (–∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)
    if len(parts) > 3:
        qari_id = int(parts[3])
        context.user_data['current_qari'] = qari_id # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–π–¥–µ—Ç –Ω–∞–∑–∞–¥
    else:
        qari_id = context.user_data.get('current_qari')
    user_id = query.from_user.id
    
    if not qari_id:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —á—Ç–µ—Ü –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    file_id = db.get_sura_file_id(qari_id, sura_number)
    sura_id = db.get_sura_by_qari_and_order(qari_id, sura_number)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É—Ä—ã –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = db.get_user_language(user_id) or 'ru'
    sura_name = SURA_NAMES.get(sura_number, {}).get(lang, f"Sura {sura_number}")
    
    if file_id:
        try:
            is_favorite = db.is_sura_favorite(user_id, sura_id) if sura_id else False
            keyboard = []
            if sura_id:
                if not is_favorite:
                    keyboard.append([InlineKeyboardButton(get_text('btn_add_favorite', lang), callback_data=f"add_fav_sura_{sura_id}")])
                else:
                    keyboard.append([InlineKeyboardButton(get_text('btn_remove_favorite', lang), callback_data=f"remove_fav_sura_{sura_id}")])
            
            # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å—É—Ä–∞–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if qari_id:
                context.user_data['current_qari'] = qari_id
                keyboard.append([InlineKeyboardButton(get_text('back', lang) + " –∫ —Å—É—Ä–∞–º", callback_data=f"qari_{qari_id}")])
            keyboard.append([InlineKeyboardButton(get_text('home', lang), callback_data="main_menu")])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            await context.bot.send_audio(
                chat_id=user_id,
                audio=file_id,
                caption=f"üìñ {sura_number}. {sura_name}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—É—Ä
            try:
                await query.message.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—É—Ä–∞–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            import asyncio
            await asyncio.sleep(3)
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—É—Ä...",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å—É—Ä–∞–º", callback_data=f"qari_{qari_id}")]])
                )
            except:
                pass
            
        except Exception as e:
            logger.error(f"Error sending audio: {e}")
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ")
    else:
        await query.message.reply_text("‚ùå –°—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def sura_of_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—É—Ä–∞ –¥–Ω—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–∞—è —Å—É—Ä–∞"""
    query = update.callback_query
    db.update_user_activity(query.from_user.id)
    
    daily_sura = db.get_daily_sura()
    if not daily_sura:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—É—Ä–∞", callback_data="random_sura")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text(
            "üåô –°—É—Ä–∞ –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Å—É—Ä—É!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—É—Ä—ã –¥–Ω—è
        sura_id, qari_id, order_number, file_id, name_ar, name_uz, name_ru, name_en, _, _, qari_name = daily_sura
        lang = db.get_user_language(query.from_user.id) or 'ru'
        lang_map = {'ar': name_ar, 'uz': name_uz, 'ru': name_ru, 'en': name_en}
        sura_name = lang_map.get(lang, name_ru)
        
        await context.bot.send_audio(
            chat_id=query.from_user.id, 
            audio=file_id, 
            caption=f"üåô –°—É—Ä–∞ –¥–Ω—è: {sura_name} - {qari_name}"
        )
        await query.message.delete()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(3)
        try:
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            )
        except:
            pass
async def nasheed_of_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—à–∏–¥ –¥–Ω—è –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞—à–∏–¥"""
    query = update.callback_query
    db.update_user_activity(query.from_user.id)
    
    daily_nasheed = db.get_daily_nasheed()
    if not daily_nasheed:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞—à–∏–¥
        keyboard = [
            [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –Ω–∞—à–∏–¥", callback_data="random_nasheed")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text(
            "‚≠ê –ù–∞—à–∏–¥ –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞—à–∏–¥!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        nasheed_id, file_id, title_ar, title_uz, title_ru, title_en, performer, _, _, _ = daily_nasheed
        lang = db.get_user_language(query.from_user.id) or 'ru'
        lang_map = {'ar': title_ar, 'uz': title_uz, 'ru': title_ru, 'en': title_en}
        nasheed_title = lang_map.get(lang, title_ru)
        
        await context.bot.send_audio(
            chat_id=query.from_user.id, 
            audio=file_id, 
            caption=f"‚≠ê –ù–∞—à–∏–¥ –¥–Ω—è: {nasheed_title} - {performer}"
        )
        await query.message.delete()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(3)
        try:
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
            )
        except:
            pass

async def chat_with_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    db.update_user_activity(query.from_user.id)
    
    user_id = query.from_user.id
    lang = db.get_user_language(user_id) or 'ru'
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    try:
        await query.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã—Ö–æ–¥–∞
    chat_msg = await context.bot.send_message(
        chat_id=user_id,
        text=get_text('chat_with_admin_msg', lang),
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text('btn_exit_chat', lang), callback_data="exit_chat")]])
    )
    
    context.user_data['in_chat'] = True
    context.user_data['chat_message_id'] = chat_msg.message_id

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    user = query.from_user
    chat_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (@{user.username or '–Ω–µ—Ç username'}, ID: {user_id}) —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏."
    
    # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –≤ –ë–î
    db.get_chat_id(ADMIN_ID, user_id, create_if_not_exists=True)

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=chat_info,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"open_chat_{user_id}")]
        ])
    )

async def favorite_suras(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—É—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    db.update_user_activity(query.from_user.id)
    
    user_id = query.from_user.id
    favorites = db.get_user_favorite_suras(user_id)
    
    if not favorites:
        await query.edit_message_text(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—É—Ä",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    keyboard = []
    for sura_id, order, name, name_ar, qari_name, qari_id in favorites:
        display_name = f"{order}. {name} ({qari_name or '...'})"
        keyboard.append([InlineKeyboardButton(display_name, callback_data=f"play_sura_{order}_{qari_id}"), InlineKeyboardButton("‚ùå", callback_data=f"remove_fav_sura_{sura_id}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    await query.edit_message_text(
        "‚ù§Ô∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—É—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def listen_nasheed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏–¥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    db.update_user_activity(query.from_user.id)

    page = context.user_data.get('nasheed_page', 0)
    items_per_page = 10

    nasheeds = db.get_nasheeds(items_per_page, page * items_per_page)
    total_nasheeds = db.get_total_nasheeds_count()

    if not nasheeds:
        await query.edit_message_text(
            "üéµ –ù–∞—à–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return

    keyboard = []
    for nasheed_id, title, performer in nasheeds:
        display_name = f"{title} - {performer or '... '}"
        keyboard.append([InlineKeyboardButton(display_name, callback_data=f"play_nasheed_{nasheed_id}")])

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"nasheed_page_{page-1}"))
    if (page + 1) * items_per_page < total_nasheeds:
        nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"nasheed_page_{page+1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    await query.edit_message_text(
        f"üéµ –ù–∞—à–∏–¥—ã (–°—Ç—Ä. {page+1})",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def play_nasheed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—à–∏–¥–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    nasheed_id = int(query.data.split("_")[-1])

    nasheed = db.get_nasheed_by_id(nasheed_id)
    if not nasheed:
        await query.message.reply_text("‚ùå –ù–∞—à–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    file_id = nasheed[1]
    title = nasheed[4] # title_ru

    is_favorite = db.is_nasheed_favorite(user_id, nasheed_id)
    keyboard = []
    if not is_favorite:
        keyboard.append([InlineKeyboardButton("üíù –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav_nasheed_{nasheed_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_fav_nasheed_{nasheed_id}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—à–∏–¥–∞–º", callback_data="listen_nasheed")])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_audio(
        chat_id=user_id, 
        audio=file_id, 
        caption=f"üéµ {title}",
        reply_markup=InlineKeyboardMarkup(keyboard))
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    await query.message.delete()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—à–∏–¥–∞–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    import asyncio
    await asyncio.sleep(3)
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–∞—à–∏–¥–æ–≤...",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö –Ω–∞—à–∏–¥–∞–º", callback_data="listen_nasheed")]])
        )
    except:
        pass

async def favorite_nasheeds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id
    favorites = db.get_user_favorite_nasheeds(user_id)

    if not favorites:
        await query.edit_message_text(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—à–∏–¥–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return

    keyboard = []
    for nasheed_id, title, performer in favorites:
        display_name = f"{title} - {performer or '...'}"
        keyboard.append([
            InlineKeyboardButton(display_name, callback_data=f"play_nasheed_{nasheed_id}"),
            InlineKeyboardButton("‚ùå", callback_data=f"remove_fav_nasheed_{nasheed_id}")
        ])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    await query.edit_message_text(
        "üíù –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–¥—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def exit_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–æ–º"""
    query = update.callback_query
    user_id = query.from_user.id
    lang = db.get_user_language(user_id) or 'ru'
    
    context.user_data['in_chat'] = False
    context.user_data.pop('chat_message_id', None)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞
    try:
        await query.message.delete()
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
    keyboard = await _get_main_keyboard(user_id)
    main_menu_text = get_text('main_menu', lang)
    
    await context.bot.send_message(
        chat_id=user_id,
        text=f"‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞.\n\n{main_menu_text}",
        reply_markup=keyboard
    )

async def handle_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback!
    data = query.data # No await needed here
    
    logger.info(f"üìû CALLBACK RECEIVED: {data} from user {query.from_user.id}")
    
    if data == "main_menu":
        await user_start_from_callback(update, context)
    elif data == "chat_with_admin":
        await chat_with_admin(update, context)
    elif data == "listen_quran":
        await listen_quran(update, context)
    elif data == "listen_nasheed":
        context.user_data['nasheed_page'] = 0
        await listen_nasheed(update, context)
    elif data.startswith("nasheed_page_"):
        context.user_data['nasheed_page'] = int(data.split("_")[-1])
        await listen_nasheed(update, context)
    elif data.startswith("qari_"):
        await show_qari_suras(update, context)
    elif data.startswith("back_to_suras_"):
        qari_id = int(data.split("_")[-1])
        context.user_data['current_qari'] = qari_id
        await show_qari_suras(update, context)
    elif data.startswith("play_sura_"):
        await play_sura(update, context)
    elif data.startswith("play_nasheed_"):
        await play_nasheed(update, context)
    elif data == "sura_of_day":
        await sura_of_day(update, context)
    elif data == "nasheed_of_day":
        await nasheed_of_day(update, context)
    elif data == "favorite_suras":
        await favorite_suras(update, context)
    elif data == "favorite_nasheeds":
        await favorite_nasheeds(update, context)
    elif data == "exit_chat":
        await exit_chat(update, context)
    elif data == "change_language":
        await change_language(update, context)
    elif data.startswith("add_fav_sura_"):
        sura_id = data.split("_")[3]
        user_id = query.from_user.id
        db.add_favorite_sura(user_id, sura_id)
        await query.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        qari_id = context.user_data.get('current_qari')
        new_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_fav_sura_{sura_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—É—Ä–∞–º", callback_data=f"back_to_suras_{qari_id}")]
        ])
        await query.edit_message_reply_markup(reply_markup=new_keyboard)

    elif data.startswith("remove_fav_sura_"):
        sura_id = data.split("_")[3]
        user_id_from_query = query.from_user.id
        db.remove_favorite_sura(user_id_from_query, sura_id)
        await query.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        if query.message and "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—É—Ä—ã" in query.message.text: # –ï—Å–ª–∏ –º—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            await favorite_suras(update, context)
        else: # –ï—Å–ª–∏ –º—ã –≤ —Å–ø–∏—Å–∫–µ —Å—É—Ä —á—Ç–µ—Ü–∞
            qari_id = context.user_data.get('current_qari')
            new_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav_sura_{sura_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—É—Ä–∞–º", callback_data=f"back_to_suras_{qari_id}")]
            ])
            await query.edit_message_reply_markup(reply_markup=new_keyboard)

    elif data.startswith("add_fav_nasheed_"):
        nasheed_id = int(data.split("_")[-1])
        db.add_favorite_nasheed(query.from_user.id, nasheed_id)
        await query.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        new_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_fav_nasheed_{nasheed_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—à–∏–¥–∞–º", callback_data="listen_nasheed")]
        ])
        await query.edit_message_reply_markup(reply_markup=new_keyboard)

    elif data.startswith("remove_fav_nasheed_"):
        nasheed_id = int(data.split("_")[-1])
        db.remove_favorite_nasheed(query.from_user.id, nasheed_id)
        await query.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        if query.message and "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–¥—ã" in query.message.text:
            await favorite_nasheeds(update, context)
        else:
            new_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üíù –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav_nasheed_{nasheed_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—à–∏–¥–∞–º", callback_data="listen_nasheed")]
            ])
            await query.edit_message_reply_markup(reply_markup=new_keyboard)

    elif data.startswith("lang_"):
        await set_language(update, context)
    
    elif data == "random_sura":
        await play_random_sura(update, context)
    
    elif data == "random_nasheed":
        await play_random_nasheed(update, context)

async def play_random_sura(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Å—É—Ä—ã"""
    query = update.callback_query
    user_id = query.from_user.id
    
    random_sura = db.get_random_sura()
    if not random_sura:
        await query.edit_message_text(
            "‚ùå –°—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    sura_id, qari_id, order_number, file_id, name_ar, name_uz, name_ru, name_en, _, _, qari_name = random_sura
    lang = db.get_user_language(user_id) or 'ru'
    lang_map = {'ar': name_ar, 'uz': name_uz, 'ru': name_ru, 'en': name_en}
    sura_name = lang_map.get(lang, name_ru)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    is_favorite = db.is_sura_favorite(user_id, sura_id)
    keyboard = []
    if not is_favorite:
        keyboard.append([InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav_sura_{sura_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_fav_sura_{sura_id}")])
    
    keyboard.append([InlineKeyboardButton("üé≤ –ï—â–µ –æ–¥–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è", callback_data="random_sura")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    await context.bot.send_audio(
        chat_id=user_id,
        audio=file_id,
        caption=f"üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—É—Ä–∞: {sura_name} - {qari_name}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await query.message.delete()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    import asyncio
    await asyncio.sleep(3)
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    except:
        pass

async def play_random_nasheed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞—à–∏–¥–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    
    random_nasheed = db.get_random_nasheed()
    if not random_nasheed:
        await query.edit_message_text(
            "‚ùå –ù–∞—à–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    nasheed_id, file_id, title_ar, title_uz, title_ru, title_en, performer, _, _, _ = random_nasheed
    lang = db.get_user_language(user_id) or 'ru'
    lang_map = {'ar': title_ar, 'uz': title_uz, 'ru': title_ru, 'en': title_en}
    nasheed_title = lang_map.get(lang, title_ru)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    is_favorite = db.is_nasheed_favorite(user_id, nasheed_id)
    keyboard = []
    if not is_favorite:
        keyboard.append([InlineKeyboardButton("üíù –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav_nasheed_{nasheed_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üíî –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_fav_nasheed_{nasheed_id}")])
    
    keyboard.append([InlineKeyboardButton("üé≤ –ï—â–µ –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π", callback_data="random_nasheed")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    await context.bot.send_audio(
        chat_id=user_id,
        audio=file_id,
        caption=f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –Ω–∞—à–∏–¥: {nasheed_title} - {performer}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await query.message.delete()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    import asyncio
    await asyncio.sleep(3)
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
    except:
        pass

async def user_start_from_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –∏–∑ callback (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è)"""
    query = update.callback_query
    user = query.from_user
    db.save_user(user.id, user.username, user.first_name)
    db.update_user_activity(user.id)
    keyboard = await _get_main_keyboard(user.id)
    
    lang = db.get_user_language(user.id) or 'ru'
    main_menu_text = get_text('main_menu', lang)
    
    await query.edit_message_text(
        main_menu_text,
        reply_markup=keyboard,
    )

async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")],
        [InlineKeyboardButton("English üá∫üá∏", callback_data="lang_en")],
        [InlineKeyboardButton("ÿßŸÑÿπÿ±ÿ®Ÿäÿ© üá∏üá¶", callback_data="lang_ar")],
        [InlineKeyboardButton("O'zbek üá∫üáø", callback_data="lang_uz")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    query = update.callback_query
    
    language = query.data.split("_")[1]
    user_id = query.from_user.id
    
    logger.info(f"üåç User {user_id} selected language: {language}")
    
    db.set_user_language(user_id, language)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    keyboard = await _get_main_keyboard(user_id)
    main_menu_text = get_text('main_menu', language)
    
    await query.edit_message_text(
        main_menu_text,
        reply_markup=keyboard
    )

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ"""
    db.update_user_activity(update.effective_user.id)
    user_id = update.effective_user.id
    lang = db.get_user_language(user_id) or 'ru'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–æ–º
    if context.user_data.get('in_chat'):
        user = update.effective_user
        chat_id = db.get_chat_id(ADMIN_ID, user_id, create_if_not_exists=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = ""
        if update.message.text:
            message_text = update.message.text
        elif update.message.photo:
            message_text = "[–§–û–¢–û]"
        elif update.message.video:
            message_text = "[–í–ò–î–ï–û]"
        elif update.message.audio:
            message_text = "[–ê–£–î–ò–û]"
        elif update.message.voice:
            message_text = "[–ì–û–õ–û–°–û–í–û–ï]"
        elif update.message.document:
            message_text = "[–î–û–ö–£–ú–ï–ù–¢]"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        if chat_id and message_text:
            db.save_message(chat_id, user_id, message_text, is_from_admin=False)
            logger.info(f"üí¨ Message from user {user_id} saved to DB: {message_text}")
        
        # –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ü–ï–†–í–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ
        if not context.user_data.get('admin_notified'):
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username or 'N/A'}, ID: {user_id})\n\n"
                     f"–û—Ç–∫—Ä–æ–π—Ç–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"open_chat_{user_id}")]
                ])
            )
            context.user_data['admin_notified'] = True
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–Ω–µ —á–∞—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é
        await update.message.reply_text(
            get_text('use_menu_buttons', lang)
        )

async def inline_sura_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI-–ø–æ–∏—Å–∫ —Å—É—Ä —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–∑—É –≤–∞—Ä–∏–∞–Ω—Ç—ã"""
    from telegram import InlineQueryResultAudio
    
    query_text = update.inline_query.query.strip()
    
    results = []
    
    # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—É—Ä—ã
    if len(query_text) == 0:
        popular = [1, 36, 55, 67, 112]  # –§–∞—Ç–∏—Ö–∞, –ô–∞-–°–∏–Ω, –†–∞—Ö–º–∞–Ω, –ú—É–ª—å–∫, –ò—Ö–ª–∞—Å
        for sura_num in popular:
            names = SURA_NAMES.get(sura_num, {})
            qaris = db.get_all_qaris()
            
            for qari in qaris[:3]:  # –¢–æ–ø 3 —á—Ç–µ—Ü–∞
                qari_id = qari[0]
                qari_name_ru = qari[2]
                file_id = db.get_sura_file_id(qari_id, sura_num)
                
                if file_id:
                    results.append(
                        InlineQueryResultAudio(
                            id=f"pop_{qari_id}_{sura_num}",
                            audio_file_id=file_id,
                            title=f"‚≠ê {sura_num}. {names.get('ru', '')}",
                            performer=qari_name_ru
                        )
                    )
        
        await update.inline_query.answer(results[:10], cache_time=30)
        return
    
    logger.info(f"üîç Inline search: '{query_text}'")
    
    # –ü–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –Ω–∞ –í–°–ï–• —è–∑—ã–∫–∞—Ö
    for sura_num, names in SURA_NAMES.items():
        found = False
        
        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —è–∑—ã–∫–∞–º + –Ω–æ–º–µ—Ä—É
        for lang_code, name in names.items():
            if query_text.lower() in name.lower() or str(sura_num) == query_text:
                found = True
                break
        
        if found:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á—Ç–µ—Ü–æ–≤ —Å —ç—Ç–æ–π —Å—É—Ä–æ–π
            qaris = db.get_all_qaris()
            
            for qari in qaris:
                qari_id = qari[0]
                qari_name_ru = qari[2]
                
                file_id = db.get_sura_file_id(qari_id, sura_num)
                
                if file_id:
                    # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    title = f"{sura_num}. {names['ru']} ({names['ar']})"
                    
                    results.append(
                        InlineQueryResultAudio(
                            id=f"s_{qari_id}_{sura_num}",
                            audio_file_id=file_id,
                            title=title,
                            performer=f"üéô {qari_name_ru}",
                            caption=f"üìñ {names['ru']}\nüá∏üá¶ {names['ar']}\nüéô {qari_name_ru}"
                        )
                    )
            
            if len(results) >= 20:
                break
    
    await update.inline_query.answer(results, cache_time=10, is_personal=True)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

async def force_refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info(f"üîÑ Force refresh from user {update.effective_user.id}")
    await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞...\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")

def main():
    logger.info("=" * 60)
    logger.info("üöÄ STARTING USER BOT")
    logger.info("=" * 60)
    
    application = Application.builder().token(USER_BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.info("üìù Registering handlers...")
    application.add_handler(CommandHandler("start", user_start))
    application.add_handler(CommandHandler("refresh", force_refresh))
    logger.info("  ‚úÖ CommandHandler: /start, /refresh")
    
    # InlineQueryHandler –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—Ä
    application.add_handler(InlineQueryHandler(inline_sura_search))
    logger.info("  ‚úÖ InlineQueryHandler: inline_sura_search")
    
    # CallbackQueryHandler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_user_callback))
    logger.info("  ‚úÖ CallbackQueryHandler: handle_user_callback")
    
    # MessageHandler –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞ (–≤–∫–ª—é—á–∞—è —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º)
    application.add_handler(MessageHandler(
        (filters.TEXT | filters.PHOTO | filters.VIDEO | filters.AUDIO | filters.VOICE | filters.Document.ALL) & ~filters.COMMAND,
        handle_user_message
    ))
    logger.info("  ‚úÖ MessageHandler: handle_user_message (text + media)")
    
    application.add_error_handler(error_handler)
    logger.info("  ‚úÖ ErrorHandler: error_handler")
    
    logger.info("=" * 60)
    logger.info("‚úÖ User bot started successfully!")
    logger.info("üì± Send /start to your bot in Telegram")
    logger.info("=" * 60)
    
    application.run_polling()

if __name__ == '__main__':
    main()